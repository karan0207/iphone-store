/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react/prop-types */
/* eslint-disable no-unused-vars */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: DatSketch (https://sketchfab.com/DatSketch)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/iphone-13-pro-concept-43bddf623d24406aae61c8f3ba516e3d
Title: iPhone 13 Pro Concept
*/

import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import IphoneModel from '../glb/iphone13.glb'
import { useFrame, useThree } from "@react-three/fiber";

const Iphone =({isRotating,setIsRotating,...props})=> {

    const Iphoneref = useRef();
  const { nodes, materials } = useGLTF(IphoneModel);
  const {gl,viewport} = useThree();





  const lastX = useRef(0);
  const rotationSpeed=useRef(0);
  const dampingFactor=0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      if(window.innerWidth<768) {
        Iphoneref.current.rotation.y += delta * 0.04 * Math.PI;
       }
      else Iphoneref.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      // rotationSpeed.current = delta * 0.01 * Math.PI;
     if(window.innerWidth<768) {
      rotationSpeed.current = delta * 0.1 * Math.PI;
     }
     else {
       rotationSpeed.current = delta * 0.01 * Math.PI;
     }
      
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      Iphoneref.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.0125;
     
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      Iphoneref.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.0125;
   
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };


useEffect(() => {
  // Add event listeners for pointer and keyboard events
  const canvas = gl.domElement;
  canvas.addEventListener("pointerdown", handlePointerDown);
  canvas.addEventListener("pointerup", handlePointerUp);
  canvas.addEventListener("pointermove", handlePointerMove);
  window.addEventListener("keydown", handleKeyDown);
  window.addEventListener("keyup", handleKeyUp);

  // Remove event listeners when component unmounts
  return () => {
    canvas.removeEventListener("pointerdown", handlePointerDown);
    canvas.removeEventListener("pointerup", handlePointerUp);
    canvas.removeEventListener("pointermove", handlePointerMove);
    window.removeEventListener("keydown", handleKeyDown);
    window.removeEventListener("keyup", handleKeyUp);
  };
}, [gl, handlePointerDown, handlePointerUp, handlePointerMove,handleKeyUp,handleKeyDown]);

// This function is called on each frame update
useFrame(() => {
  // If not rotating, apply damping to slow down the rotation (smoothly)
  if (!isRotating) {
    // Apply damping factor
    rotationSpeed.current *= dampingFactor;

    // Stop rotation when speed is very small
    if (Math.abs(rotationSpeed.current) < 0.001) {
      rotationSpeed.current = 0;
    }

    Iphoneref.current.rotation.y += rotationSpeed.current;
  } else {
    // When rotating, determine the current stage based on island's orientation
    const rotation = Iphoneref.current.rotation.y;

    /**
     * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
     * The goal is to ensure that the rotation value remains within a specific range to
     * prevent potential issues with very large or negative rotation values.
     *  Here's a step-by-step explanation of what this code does:
     *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
     *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
     *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
     *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
     *     This is done to ensure that the value remains positive and within the range of
     *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
     *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
     *     modulo operation to the value obtained in step 2. This step guarantees that the value
     *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
     *     circle in radians.
     */
    const normalizedRotation =
      ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

    // Set the current stage based on the island's orientation
    // switch (true) {
    //   case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
    //     setCurrentStage(4);
    //     break;
    //   case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
    //     setCurrentStage(3);
    //     break;
    //   case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
    //     setCurrentStage(2);
    //     break;
    //   case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
    //     setCurrentStage(1);
    //     break;
    //   default:
    //     setCurrentStage(null);
    // }
  }
});













  return (
    <group {...props} dispose={null}  ref={Iphoneref}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={100}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.IPHONE13_BlueGlossy_0.geometry}
          material={materials.BlueGlossy}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.IPHONE13_Red_0.geometry}
          material={materials.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.IPHONE13_BlueMatte_0.geometry}
          material={materials.BlueMatte}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.IPHONE13_SpeakerAndMiic_0.geometry}
          material={materials.SpeakerAndMiic}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.IPHONE13_Silver001_0.geometry}
          material={materials["Silver.001"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BackCover_Blue_0.geometry}
          material={materials.Blue}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Screen_Screen_0.geometry}
          material={materials.Screen}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CameraModuleBlack_BlackGlossy_0.geometry}
          material={materials.BlackGlossy}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CameraModuleBlack_SpeakerAndMiic_0.geometry}
          material={materials.SpeakerAndMiic}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Bezel_BezelAndNotch_0.geometry}
          material={materials.BezelAndNotch}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Bezel_SpeakerAndMiic_0.geometry}
          material={materials.SpeakerAndMiic}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Bezel_CameraGray_0.geometry}
          material={materials.CameraGray}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Bezel_FrontCameraGlass_0.geometry}
          material={materials.FrontCameraGlass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.PowerButton_BlueGlossy_0.geometry}
          material={materials.BlueGlossy}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Volume_Button_BlueGlossy_0.geometry}
          material={materials.BlueGlossy}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.MuteButton_BlueGlossy_0.geometry}
          material={materials.BlueGlossy}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera1_CameraBlack_0.geometry}
          material={materials.CameraBlack}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera1_CameraMetal_0.geometry}
          material={materials.CameraMetal}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera1_CameraGray_0.geometry}
          material={materials.CameraGray}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere_Lens_0.geometry}
          material={materials.Lens}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera2_CameraBlack_0.geometry}
          material={materials.CameraBlack}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera2_CameraMetal_0.geometry}
          material={materials.CameraMetal}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera2_CameraGray_0.geometry}
          material={materials.CameraGray}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere002_Lens_0.geometry}
          material={materials.Lens}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera3_CameraBlack_0.geometry}
          material={materials.CameraBlack}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera3_CameraMetal_0.geometry}
          material={materials.CameraMetal}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Camera3_CameraGray_0.geometry}
          material={materials.CameraGray}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Sphere001_Lens_0.geometry}
          material={materials.Lens}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.LiDar_LiDar_0.geometry}
          material={materials.LiDar}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Flash_Silver_0.geometry}
          material={materials.Silver}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Flash_Flash_0.geometry}
          material={materials.Flash}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.CameraModuleGlass_Glass_0.geometry}
          material={materials.Glass}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.FrontCam_Lens_0.geometry}
          material={materials.Lens}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Apple_Logo_AppleLogo_0.geometry}
          material={materials.AppleLogo}
        />
      </group>
    </group>
  );
}

// useGLTF.preload("/iphone13.glb");
export default Iphone;
